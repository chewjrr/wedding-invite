// src/components/GuestbookForm.jsx
import { useState } from "react";

export default function GuestbookForm({ onNewWish }) {
  const [name, setName] = useState("");
  const [message, setMessage] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ .env (—á–µ—Ä–µ–∑ Vite)
  const API_URL = import.meta.env.VITE_API_URL;

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim() || !message.trim()) return;

    setIsSubmitting(true);

    const newWish = { name: name.trim(), message: message.trim() };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏—è:", newWish);

    try {
      const res = await fetch(`${API_URL}/api/wish`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newWish),
      });

      console.log("üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", res.status, res.statusText);

      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 201 ‚Äî –≤—Å—ë –æ–∫
      if (res.ok) {
        let savedWish;
        try {
          savedWish = await res.json(); // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
          console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É:", savedWish);
        } catch (parseError) {
          console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å CORS", parseError);
          // –ï—Å–ª–∏ JSON –Ω–µ –ø—Ä–∏—à—ë–ª (–∏–∑-–∑–∞ CORS), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          savedWish = { ...newWish, id: Date.now(), createdAt: new Date().toISOString() };
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
        onNewWish(savedWish);

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        setName("");
        setMessage("");

        alert("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç—ë–ø–ª–æ–µ —Å–ª–æ–≤–æ! üíï");
      } else {
        // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
        const errorText = await res.text();
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", res.status, errorText);
        alert(`–û—à–∏–±–∫–∞ ${res.status}: ${errorText}`);
      }
    } catch (err) {
      console.error("üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/–∑–∞–ø—Ä–æ—Å–∞:", err);
      // –î–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ
      const confirm = window.confirm(
        "–ü–æ–∂–µ–ª–∞–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n" +
        "–•–æ—Ç–∏—Ç–µ —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –æ–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ? (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)"
      );
      if (confirm) {
        const optimisticWish = {
          ...newWish,
          id: Date.now(),
          createdAt: new Date().toISOString(),
        };
        onNewWish(optimisticWish);
        setName("");
        setMessage("");
        alert("–ü–æ–∂–µ–ª–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤ –±–∞–∑–µ).");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <section style={formStyles.section}>
      <h2 style={formStyles.heading}>–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ</h2>
      <form onSubmit={handleSubmit} style={formStyles.form}>
        <input
          type="text"
          placeholder="–í–∞—à–µ –∏–º—è"
          value={name}
          onChange={(e) => setName(e.target.value)}
          style={formStyles.input}
          name="name"
          disabled={isSubmitting}
        />
        <textarea
          placeholder="–í–∞—à–µ —Ç—ë–ø–ª–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          style={formStyles.textarea}
          name="message"
          disabled={isSubmitting}
        />
        <button type="submit" style={formStyles.button} disabled={isSubmitting}>
          {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
        </button>
      </form>
    </section>
  );
}

const formStyles = {
  section: {
    padding: "60px 20px",
    textAlign: "center",
    background: "var(--color-bg)",
  },
  heading: {
    fontSize: "1.8rem",
    marginBottom: "20px",
    color: "var(--color-text)",
  },
  form: {
    maxWidth: "500px",
    margin: "0 auto 30px",
    display: "flex",
    flexDirection: "column",
    gap: "12px",
  },
  input: {
    padding: "12px",
    border: "1px solid #ddd",
    borderRadius: "8px",
    fontSize: "1rem",
  },
  textarea: {
    padding: "12px",
    border: "1px solid #ddd",
    borderRadius: "8px",
    fontSize: "1rem",
    minHeight: "80px",
    resize: "vertical",
  },
  button: {
    padding: "12px",
    backgroundColor: "var(--color-accent)",
    color: "#fff",
    border: "none",
    borderRadius: "8px",
    fontSize: "1rem",
    cursor: "pointer",
    fontWeight: "500",
  },
};