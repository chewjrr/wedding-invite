// src/components/GuestbookForm.jsx
import { useState } from "react";
import Toast from "./Toast"; // –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

export default function GuestbookForm({ onNewWish }) {
    const [name, setName] = useState("");
    const [message, setMessage] = useState("");
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [toast, setToast] = useState(null);

    const API_URL = import.meta.env.VITE_API_URL;

    const closeToast = () => setToast(null);

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!name.trim() || !message.trim()) return;

        if (typeof onNewWish !== "function") {
            console.error("‚ùå onNewWish is not a function", onNewWish);
            setToast({
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.",
                type: "error",
            });
            return;
        }

        setIsSubmitting(true);
        setToast({ message: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...", type: "info" });

        const newWish = { name: name.trim(), message: message.trim() };
        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏—è:", newWish);

        try {
            const res = await fetch(`${API_URL}/api/wish`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(newWish),
            });

            console.log("üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", res.status, res.statusText);

            if (res.status === 201) {
                const savedWish = await res.json();
                console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É:", savedWish);

                const formattedWish = {
                    id: savedWish.id,
                    name: savedWish.name,
                    message: savedWish.message,
                    createdAt: savedWish.created_at || savedWish.createdAt,
                };

                onNewWish(formattedWish);
                setName("");
                setMessage("");
                setToast({ message: "–ü–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üíï", type: "success" });
            } else {
                let errorData;
                const clonedRes = res.clone();

                try {
                    errorData = await res.json();
                } catch (e) {
                    try {
                        const text = await clonedRes.text();
                        errorData = { error: text || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" };
                    } catch {
                        errorData = { error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞" };
                    }
                }

                const errorMsg = errorData.error || "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ";
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", res.status, errorMsg);
                setToast({ message: `–û—à–∏–±–∫–∞: ${errorMsg}`, type: "error" });
            }
        } catch (err) {
            console.error("üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/–∑–∞–ø—Ä–æ—Å–∞:", err);
            setToast({
                message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.",
                type: "error",
            });
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <>
            <section style={formStyles.section}>
                <h2 style={formStyles.heading}>–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ</h2>
                <form onSubmit={handleSubmit} style={formStyles.form}>
                    <input
                        type="text"
                        placeholder="–í–∞—à–µ –∏–º—è"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        style={formStyles.input}
                        name="name"
                        disabled={isSubmitting}
                    />
                    <textarea
                        placeholder="–í–∞—à–µ —Ç—ë–ø–ª–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ"
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        style={formStyles.textarea}
                        name="message"
                        disabled={isSubmitting}
                    />
                    <button type="submit" style={formStyles.button} disabled={isSubmitting}>
                        {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
                    </button>
                </form>
            </section>


            {toast && (
                <Toast
                    message={toast.message}
                    type={toast.type}
                    onClose={closeToast}
                />
            )}
        </>
    );
}

const formStyles = {
    section: {
        padding: "100px 20px",
        textAlign: "center",
        background: "var(--color-bg)",
    },
    heading: {
        fontSize: "1.8rem",
        marginBottom: "20px",
        color: "var(--color-text)",
    },
    form: {
        maxWidth: "500px",
        margin: "0 auto 30px",
        display: "flex",
        flexDirection: "column",
        gap: "12px",
    },
    input: {
        padding: "12px",
        border: "1px solid #ddd",
        borderRadius: "8px",
        fontSize: "1rem",
    },
    textarea: {
        padding: "12px",
        border: "1px solid #ddd",
        borderRadius: "8px",
        fontSize: "1rem",
        minHeight: "80px",
        resize: "vertical",
    },
    button: {
        padding: "12px",
        backgroundColor: "#f46fa2", // –Ø—Ä–∫–∏–π —Ä–æ–∑–æ–≤—ã–π
        color: "#fff",
        border: "none",
        borderRadius: "8px",
        fontSize: "1rem",
        cursor: "pointer",
        fontWeight: "500",
        //boxShadow: "0 4px 12px rgba(244, 111, 162, 0.2)",
        transition: "background-color 0.3s ease, transform 0.2s ease",
    },
    
};