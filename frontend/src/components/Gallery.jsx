import { motion, AnimatePresence } from "framer-motion";
import { useEffect, useRef, useState } from "react";
import { useInView } from "framer-motion";
import { FaPlus, FaMinus } from "react-icons/fa";
import { useAnimation } from "framer-motion";

const photos = [
  { src: "/images/photo11.jpg", alt: "–ü–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ" },
  { src: "/images/photo8.jpg", alt: "–ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏" },
  { src: "/images/photo9.jpg", alt: "–ü–µ—Ä–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞" },
  { src: "/images/photo10.jpg", alt: "–í –∞–∫–≤–∞–ø–∞—Ä–∫–µ —Ä–µ–∞–ª—å–Ω–æ –æ–±–∞–ª–¥–µ–Ω–Ω–æ" },
  { src: "/images/photo7.jpg", alt: "–ö—Ä—É—Ç—ã–µ –≤ –æ—á–∫–∞—Ö üòé" },
  { src: "/images/photo2.jpg", alt: "–ë—ã–ª–∏ –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–µ Cream Soda" },
  { src: "/images/photo12.jpg", alt: "–û—Ç–º–µ—Ç–∏–ª–∏ –º–∞—Å–ª–µ–Ω–∏—Ü—É" },
  { src: "/images/photo17.jpg", alt: "–î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø –ö–ê–¢–ò üéâ" },
  { src: "/images/photo1.jpg", alt: "–°–Ω–æ–≤–∞ –Ω–∞ –í–î–ù–•" },
  { src: "/images/photo13.jpg", alt: "–ñ–¥–∞–ª–∏ —Å–∞–ª—é—Ç –Ω–∞ –î–µ–Ω—å –†–æ—Å—Å–∏–∏" },
  { src: "/images/photo4.jpg", alt: "–ö—É–ø–∞–ª–∏—Å—å –≤ –î–æ–ª–≥–æ–ø—Ä—É–¥–Ω–æ–º" },
  { src: "/images/photo14.jpg", alt: "–ü–µ–Ω–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ –ø–∏–¥–∏–¥–∏" },
  { src: "/images/photo5.jpg", alt: "–û—Ç–º–µ—á–∞–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã" },
  { src: "/images/photo15.jpg", alt: "–û—Ç–º–µ—á–∞–ª–∏ 30 –ª–µ—Ç –±—Ä–∞–∫–∞ (–Ω–µ –Ω–∞—à–µ–≥–æ) (–ø–æ–∫–∞)" },
  { src: "/images/photo6.jpg", alt: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!!!" },
  { src: "/images/photo16.jpg", alt: "–ò –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üòä" },
];

export default function Gallery() {
  const titleRef = useRef(null);
  const isInView = useInView(titleRef, { once: true, threshold: 0.5 });
  const controls = useAnimation();

  const [activeIndex, setActiveIndex] = useState(null);

  useEffect(() => {
    if (isInView) {
      controls.start("visible");
    }
  }, [isInView, controls]);

  const handleClick = (index) => {
    setActiveIndex(activeIndex === index ? null : index);
  };

  return (
    <section style={styles.section}>
      <motion.h2
        ref={titleRef}
        initial={{ opacity: 0, y: 20 }}
        animate={isInView ? { opacity: 1, y: 0 } : {}}
        transition={{ duration: 0.6 }}
        style={styles.heading}
      >
        –ù–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è
      </motion.h2>

      <div style={styles.grid}>
        {photos.map((photo, index) => (
          <PhotoItem
            key={index}
            photo={photo}
            index={index}
            isActive={activeIndex === index}
            onClick={() => handleClick(index)}
            controls={controls}
          />
        ))}
      </div>
    </section>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
function PhotoItem({ photo, index, isActive, onClick, controls }) {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <motion.div
      variants={{
        hidden: { opacity: 0, scale: 0.9 },
        visible: {
          opacity: 1,
          scale: 1,
          transition: { delay: index * 0.1, duration: 0.5 }, // –ø–ª–∞–≤–Ω–µ–µ
        },
      }}
      initial="hidden"
      animate={controls}
      style={{
        ...styles.photoWrapper,
        ...(isExpanded && styles.expanded),
      }}
      onClick={onClick}
      tabIndex="0"
      role="button"
      aria-label={`–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å—å: ${photo.alt}`}
    >
      {/* –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
      <div style={styles.square}>
        <img src={photo.src} alt={photo.alt} style={styles.img} loading="lazy" />

        {/* –ü–æ–¥–ø–∏—Å—å */}
        <AnimatePresence>
          {isActive && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              transition={{ duration: 0.3 }}
              style={styles.caption}
            >
              {photo.alt}
            </motion.div>
          )}
        </AnimatePresence>

        {/* –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è */}
        <button
          type="button"
          aria-label={isExpanded ? "–£–º–µ–Ω—å—à–∏—Ç—å —Ñ–æ—Ç–æ" : "–£–≤–µ–ª–∏—á–∏—Ç—å —Ñ–æ—Ç–æ"}
          style={styles.expandButton}
          onClick={(e) => {
            e.stopPropagation();
            setIsExpanded(!isExpanded);
          }}
        >
          {isExpanded ? <FaMinus size={16} /> : <FaPlus size={16} />}
        </button>
      </div>
    </motion.div>
  );
}

// –°—Ç–∏–ª–∏
const styles = {
  section: {
    padding: "80px 20px",
    textAlign: "center",
    background: "var(--color-bg)",
    overflow: "hidden",
  },
  heading: {
    fontSize: "1.9rem",
    fontWeight: "500",
    color: "var(--color-text)",
    marginBottom: "40px",
  },
  grid: {
    display: "grid",
    gridTemplateColumns: "repeat(2, 1fr)",
    gap: "12px",
    maxWidth: "600px",
    margin: "0 auto",
    padding: "0 10px",
    boxSizing: "border-box",
  },
  photoWrapper: {
    borderRadius: "12px",
    overflow: "hidden",
    boxShadow: "0 6px 15px rgba(0,0,0,0.08)",
    cursor: "pointer",
    userSelect: "none",
    transition: "all 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)", // ‚úÖ –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
  },
  expanded: {
    gridColumn: "span 2",
    gridRow: "span 2",
    transform: "scale(1.08)", // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
    boxShadow: "0 15px 30px rgba(0,0,0,0.15)", // –£—Å–∏–ª–∏–≤–∞–µ–º —Ç–µ–Ω—å
    zIndex: 10,
  },
  square: {
    position: "relative",
    width: "100%",
    height: 0,
    paddingBottom: "100%",
    backgroundColor: "#f0f0f0",
  },
  img: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    objectFit: "cover",
    display: "block",
  },
  caption: {
    fontSize: "0.9rem",
    padding: "12px 10px",
    color: "#ffffff",
    backgroundColor: "rgba(0, 0, 0, 0.75)",
    borderRadius: "0 0 12px 12px",
    textAlign: "center",
    fontFamily: "Poppins",
    fontWeight: "400",
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
    zIndex: 10,
  },
  expandButton: {
    position: "absolute",
    top: "8px",
    left: "8px",
    width: "30px",
    height: "30px",
    borderRadius: "50%",
    backgroundColor: "rgba(255, 255, 255, 0.9)",
    color: "var(--color-accent)",
    border: "2px solid var(--color-accent)",
    fontSize: "16px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    cursor: "pointer",
    zIndex: 10,
    backdropFilter: "blur(2px)",
    transition: "all 0.3s ease",
    //transform: "translateY(50%)",
  },
};